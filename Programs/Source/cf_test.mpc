from collaborative_filter import SparseUBCosineCF, UBCosineCF, IBCosineCF
from recommender import *
import sys
from config_mine import *
from math import sqrt, floor, ceil
import random as random2

# Fix constant seed from compiler
random = random2.Random()
random.seed()

# Global parameters
sys.setrecursionlimit(100000)
program.bit_length = 80
program.security = 40
sfix.set_precision(14, 28)
cfix.set_precision(14, 28)
# Verbosity
DEBUG = 2

# IO Interface 
# -> Get all inputs from the same player.
IO = InputFp(0)

    
def testUBplain(T):
    print_ln("############################\nNEW TEST RUN")
    print_ln("User-based CF")
    print_ln("n = %s\nm = %s", T.n, T.m)
    print_ln("")
    
    T.CF = UBCosineCF(T.n,T.m)
    
    T.prep_private_plain_input(IO)
    T.private_plain_input(T.CF)
    
    
    #########################
    # Building Model
    #########################
    start_timer(T.id+2)
    T.CF.build_model()
    stop_timer(T.id+2)

def testUBsparse(T, cap):
    print_ln("############################\nNEW TEST RUN")
    print_ln("Sparse User-based CF")
    print_ln("n = %s\nm = %s, cap = %s", T.n, T.m, cap)
    print_ln("")
    
    T.CF = SparseUBCosineCF(T.n,T.m, cap)
    
    T.prep_sparse_input(IO)
    T.private_sparse_input(T.CF)
    
    #########################
    # Building Model
    #########################
    start_timer(T.id+2)
    T.CF.build_model()
    stop_timer(T.id+2)
    
def testIBplain(T):   
    print_ln("############################\nNEW TEST RUN")
    print_ln("Item-based CF")
    print_ln("n = %s\nm = %s", T.n, T.m)
    print_ln("")
    
    T.CF = IBCosineCF(T.n, T.m)
    
    T.prep_private_plain_input(IO)
    T.private_plain_input(T.CF)
    
    #########################
    # Building Model
    #########################
    start_timer(T.id+2)
    T.CF.build_model()
    stop_timer(T.id+2)

def testPredictions(T, knn_params, sampsize): 
    if T.CF == None:
        raise RuntimeError("Call another test to build model first!")
    
    print_ln("PREDICTIONS")
    print_ln("k    f     mae      rmse")
    
    timer_count = 1
    for (k, f) in knn_params:
        start_timer(T.id*100+timer_count)
        
        mae = cfix(0)
        rmse = cfix(0)
        
        sampling = random.sample(T.Rlist,sampsize)
        
        for (u,i,r) in sampling:
            print_str("%s to %s    \r", u, i)
            prediction = T.CF.nn_prediction(u,i, k, f)
            if isinstance(prediction, sfix):
                prediction = prediction.reveal()
            error = prediction + T.mean[u] - r
            error = cint(error>=0) * (error + error) - error
            mae += error
            rmse += (error)**2
        
        mae = mae / sampsize
        rmse = (rmse / sampsize).sqrt()
        
        print_ln("%s %s %s %s",k, f, mae, rmse)
        stop_timer(T.id*100+timer_count)
        timer_count += 1

"""
Uncomment to measure UB CF performance
"""
# PREDICT = True
# NPREDICTIONS = 5000
# N_PARAMS = [100,200,300,400,500]
# K = 9
# F = 4
#   
#    
# for id,n in enumerate(N_PARAMS):
#     T = Test(id*10).eval_data(n=n).mean_centered()
#     testUBplain(T)
#     if PREDICT:
#         testPredictions(T, [(K, F)], NPREDICTIONS)
#     T.CF.delete()

"""
Uncomment to measure IB CF performance
"""      
# PREDICT = True
# NPREDICTIONS = 5000
# N = 200
# M_PARAMS = [2000,3000,4000,5000,6000]
# K = 9
# F = 4  
# for id,m in enumerate(M_PARAMS):
#     T = Test(id*10+100).eval_data(m=m).mean_centered()
#     testIBplain(T)
#     if PREDICT:
#         testPredictions(T, [(K, F)], NPREDICTIONS)
#     T.CF.delete()
 
"""
Debugging 
"""        
# K = 9
# F = 4
# N = 100
# M = 2000
# NPREDICTIONS = 5000
#   
# T = Test(1).small_data().mean_centered() 
# testUBplain(T)
# T.CF.print_model()
# testPredictions(T, [(2, 14)], 16)
# T.CF.delete()
#   
# T = Test(2).small_data().mean_centered() 
# testIBplain(T)
# T.CF.print_model()
# testPredictions(T, [(2, 14)], 16)
# T.CF.delete()
#   
# T = Test(3).eval_data(n=N, m=M).mean_centered() 
# testUBplain(T)
# testPredictions(T, [(K, F)], NPREDICTIONS)
# T.CF.delete()
#        
# T = Test(4).eval_data(n=100, m=2000).mean_centered() 
# testIBplain(T)
# testPredictions(T, [(K, F)], NPREDICTIONS)
# T.CF.delete()
        
"""
Write Input to file
DO NOT UNCOMMENT
"""
print "Write private input"        
IO.gen_input_fp()


        