from Compiler.floatingpoint import two_power, shift_two
from scipy.ndimage.fourier import fourier_ellipsoid
from math import ceil, log, sqrt


def test(actual, expected):    
    if isinstance(actual, (sint, sgf2n, sfix)):
        actual = actual.reveal()
    print_ln('expected %s, got %s', expected, actual)

program.bit_length = 80
program.security = 40


def newton_invsqrt(a, k, f): 
    rounds = 5 
    three = cfix(3).v
    X = Array(rounds, cint)
    # 1 - 1/2(x-1) + 3/8(x-1)^2
    t0 = cfix(1/sqrt(2)).v
    t1 = cfix(1/4*sqrt(2)).v
    t2 = cfix(3/32*sqrt(2)).v
    a_shift = a - cfix(2).v
    X[0] = t0 - shift_two(t1 * a_shift,f)  + shift_two(t2 * shift_two(a_shift * a_shift,f),f)
    for i in range(1, rounds):
        X[i] = shift_two(shift_two(X[i-1],1) * (three - shift_two(shift_two(X[i-1]**2,f) * a,f)),f)
        print_ln("X[i]: %s", X[i])
        
    return X[rounds - 1]

a = 5.0
test(cfix(a).sqrt(), sqrt(a))
a = 45.0
c = cfix(a)
test(c.sqrt(), sqrt(a))
test(c.sqrt(), sqrt(a))